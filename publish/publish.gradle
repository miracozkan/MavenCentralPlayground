apply plugin: 'maven-publish'
apply plugin: 'signing'

// Publish
String publishFolderName = new String('publish')

// Sonatype Api Properties
String ossrhUsername = new String()
String ossrhPassword = new String()

Properties localProperties = new Properties()
String localPropertiesFileName = new String('local.properties')
def localPropertiesFile = file("$rootDir/$localPropertiesFileName")
boolean hasLocalProperties = localPropertiesFile.exists()

// If local.properties doesn't exist, then we get bintrayUser & bintrayApiKey from Bintray secrets.
if (hasLocalProperties) {
    localProperties.load(localPropertiesFile.newDataInputStream())
    ossrhUsername = localProperties.getProperty("ossrhUsername")
    ossrhPassword = localProperties.getProperty("ossrhPassword")
} else {
    ossrhUsername = System.getenv("OSSRH_USERNAME")
    ossrhPassword = System.getenv("OSSRH_PASSWORD")
}

// Developer Properties
Properties developerProperties = new Properties()
String developerPropertiesFileName = new String('developer.properties')
developerProperties.load(file("$rootDir/${project.name}/$developerPropertiesFileName").newDataInputStream())

// Library Properties
Properties libraryProperties = new Properties()
String libraryPropertiesFileName = new String('library.properties')
libraryProperties.load(file("$rootDir/${project.name}/$libraryPropertiesFileName").newDataInputStream())

// License Properties
Properties licenseProperties = new Properties()
String licensePropertiesFileName = new String('license.properties')
licenseProperties.load(file("$rootDir/$publishFolderName/$licensePropertiesFileName").newDataInputStream())

// Lib Properties
Properties publishProperties = new Properties()
String publishPropertiesFileName = new String('publish.properties')
publishProperties.load(file("$rootDir/$publishFolderName/$publishPropertiesFileName").newDataInputStream())

task checkProperties {
    if (hasLocalProperties) {
        throwMissingValueExceptionIfNeed(localProperties, localPropertiesFileName)
    }

    throwMissingValueExceptionIfNeed(developerProperties, developerPropertiesFileName)
    throwMissingValueExceptionIfNeed(publishProperties, publishPropertiesFileName)
    throwMissingValueExceptionIfNeed(licenseProperties, licensePropertiesFileName)
    throwMissingValueExceptionIfNeed(libraryProperties, libraryPropertiesFileName)
}

private static def throwMissingValueExceptionIfNeed(propertyMap, fileName) {
    propertyMap.each { entry ->
        if (!entry.value) {
            throw new Exception("${entry.key} is empty in $fileName")
        }
    }
}

version = libraryProperties.getProperty('libraryVersion')
group = publishProperties.getProperty('publishedGroupId')

publishing {
    publications {
        release(MavenPublication) {
            groupId publishProperties.getProperty('publishedGroupId')
            version libraryProperties.getProperty('libraryVersion')
            artifactId libraryProperties.getProperty('artifact')

            pom {
                name = libraryProperties.getProperty('libraryName')
                description = libraryProperties.getProperty('libraryDescription')
                url = publishProperties.getProperty('siteUrl')

                scm {
                    connection = publishProperties.getProperty('scmConnection')
                    developerConnection = publishProperties.getProperty('scmDevConnection')
                    url = publishProperties.getProperty('siteUrl')
                }

                licenses {
                    license {
                        name = licenseProperties.getProperty('licenseName')
                        url = licenseProperties.getProperty('licenseUrl')
                    }
                }

                developers {
                    developer {
                        id = developerProperties.getProperty('developerId')
                        name = developerProperties.getProperty('developerName')
                        email = developerProperties.getProperty('developerEmail')
                    }
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "mavencentral"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    packageGroup = publishProperties.getProperty('publishedGroupId')
    stagingProfileId = localProperties.getProperty('stagingProfileId')
    stagingRepositoryId = libraryProperties.getProperty('stagingRepositoryId')
    username = ossrhUsername
    password = ossrhPassword
}


task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
